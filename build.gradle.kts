import com.diffplug.gradle.spotless.SpotlessExtension
import io.github.cfraser.connekt.projectUrl
import io.gitlab.arturbosch.detekt.Detekt
import java.net.URL
import kotlinx.knit.KnitPluginExtension
import org.gradle.jvm.tasks.Jar
import org.jetbrains.dokka.Platform
import org.jetbrains.dokka.gradle.DokkaTask
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.jreleaser.model.Active

plugins {
  kotlin("jvm") apply false
  id("org.jetbrains.dokka") apply false
  id("com.diffplug.spotless")
  id("io.gitlab.arturbosch.detekt")
  id("io.github.gradle-nexus.publish-plugin")
  id("org.jreleaser")
  id("com.github.ben-manes.versions")
  id("kotlinx-knit")
}

allprojects {
  group = "io.github.c-fraser"
  version = "0.1.0"

  repositories { mavenCentral() }
}

subprojects project@{
  apply(plugin = "org.jetbrains.kotlin.jvm")
  apply(plugin = "org.jetbrains.dokka")
  apply(plugin = "io.gitlab.arturbosch.detekt")

  configure<JavaPluginExtension> {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    modularity.inferModulePath.set(true)

    withSourcesJar()
  }

  tasks {
    withType<KotlinCompile>().configureEach {
      kotlinOptions {
        jvmTarget = "${JavaVersion.VERSION_11}"
        freeCompilerArgs =
            listOf(
                "-Xjsr305=strict",
                "-Xjvm-default=all",
                "-Xopt-in=kotlin.RequiresOptIn",
                "-Xopt-in=io.github.cfraser.connekt.api.InternalConnektApi",
                "-Xopt-in=kotlinx.coroutines.DelicateCoroutinesApi",
                "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi")
      }
    }

    withType<Test> { useJUnitPlatform { excludeTags("integration") } }

    create("integrationTest", Test::class) {
      description = "Runs tests annotated with 'integration' tag"

      useJUnitPlatform { includeTags("integration") }
    }

    withType<DokkaTask>().configureEach {
      dokkaSourceSets {
        configureEach {
          includes.from(projectDir.resolve("MODULE.md"))
          platform.set(Platform.jvm)
          jdkVersion.set(JavaVersion.VERSION_11.ordinal)
          sourceLink {
            localDirectory.set(file("src/main/kotlin"))
            remoteUrl.set(URL("$projectUrl/tree/main/${this@project.name}/src/main/kotlin"))
            remoteLineSuffix.set("#L")
          }
        }
      }
    }

    register("dokkaJavadocJar", Jar::class) {
      val dokkaJavadoc = named<DokkaTask>("dokkaJavadoc")
      dependsOn(dokkaJavadoc)
      archiveClassifier.set("javadoc")
      from(dokkaJavadoc.get().outputDirectory.get())
    }
  }

  dependencies {
    val junitVersion: String by rootProject

    "implementation"(kotlin("stdlib"))
    "testImplementation"(kotlin("test"))
    "testImplementation"(kotlin("test-junit5"))
    "testImplementation"("org.junit.jupiter:junit-jupiter-api:$junitVersion")
    "testRuntimeOnly"("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
  }

  tasks.withType<Detekt> {
    jvmTarget = "${JavaVersion.VERSION_11}"
    buildUponDefaultConfig = true
    config.setFrom(rootDir.resolve("detekt.yml"))
  }
}

configure<SpotlessExtension> {
  val licenseHeader =
      """
      /*
      Copyright 2021 c-fraser

      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at

          https://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
      */
      """.trimIndent()

  val ktfmtVersion: String by rootProject

  kotlin {
    ktfmt(ktfmtVersion)
    licenseHeader(licenseHeader)
    target(
        fileTree(rootProject.rootDir) {
          // Exclude the files automatically generated by `kotlinx-knit`
          exclude("examples/src/*/kotlin/io/github/cfraser/connekt/example/knit/*.kt")
          include("**/src/**/*.kt")
        })
  }

  kotlinGradle { ktfmt(ktfmtVersion) }

  java {
    googleJavaFormat()
    licenseHeader(licenseHeader)
    target(fileTree(rootProject.rootDir) { include("**/src/**/*.java") })
  }
}

nexusPublishing {
  repositories {
    sonatype {
      nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
      snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
      username.set(System.getenv("SONATYPE_USERNAME"))
      password.set(System.getenv("SONATYPE_PASSWORD"))
    }
  }
}

jreleaser {
  project {
    website.set(projectUrl)
    authors.set(listOf("c-fraser"))
    license.set("Apache-2.0")
    extraProperties.put("inceptionYear", "2021")
  }

  release {
    github {
      owner.set("c-fraser")
      overwrite.set(true)
      token.set(System.getenv("GITHUB_TOKEN").orEmpty())
      changelog {
        formatted.set(Active.ALWAYS)
        format.set("- {{commitShortHash}} {{commitTitle}}")
        contributors.enabled.set(false)
        labeler {
          label.set("added")
          title.set("added")
        }
        category {
          title.set("Added")
          labels.set(listOf("added"))
        }
        labeler {
          label.set("changed")
          title.set("changed")
        }
        category {
          title.set("Changed")
          labels.set(listOf("changed"))
        }
        labeler {
          label.set("removed")
          title.set("removed")
        }
        category {
          title.set("Removed")
          labels.set(listOf("removed"))
        }
      }
    }
  }
}

configure<KnitPluginExtension> {
  siteRoot = projectUrl
  files = fileTree(rootProject.rootDir) { include("README.md") }
  rootDir = rootProject.rootDir
}

tasks {
  val detektAll by
      registering(Detekt::class) {
        jvmTarget = "${JavaVersion.VERSION_11}"
        parallel = true
        buildUponDefaultConfig = true
        config.setFrom(rootDir.resolve("detekt.yml"))
        setSource(files(projectDir))
        include("**/*.kt", "**/*.kts")
        exclude(
            "**/build/**",
            "**/resources/**",
            // Exclude the files automatically generated by `kotlinx-knit`
            "examples/src/*/kotlin/io/github/cfraser/connekt/example/knit/*.kt")
      }

  spotlessApply { finalizedBy(detektAll) }
}
